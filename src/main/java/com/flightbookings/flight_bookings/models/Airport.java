package com.flightbookings.flight_bookings.models;

import com.flightbookings.flight_bookings.models.Flight;

import java.util.Set;//package com.flightbookings.flight_bookings.models;


import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.*;

import java.util.Set;
/**
 * Represents an airport entity in the system.
 * Contains details about the airport's code, name, location, and associated flights.
 */
@Entity
@Table(name = "Airport")
@Schema(description = "All details about the Airport entity.")
public class Airport {

    /**
     * The unique identifier of the airport generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Schema(description = "The database generated airport ID", example = "1")
    private Long airportId;

    /**
     * The airport code.
     */
    @Column
    @Schema(description = "The airport code")
    private String airportCode;

    /**
     * The name of the airport.
     */
    @Column
    @Schema(description = "The name of the airport")
    private String airportName;

    /**
     * The city where the airport is located.
     */
    @Column
    @Schema(description = "The city where the airport is located")
    private String airportCity;

    /**
     * The country where the airport is located.
     */
    @Column
    @Schema(description = "The country where the airport is located")
    private String airportCountry;

    /**
     * The flights associated with this airport.
     */
    @ManyToMany(
            cascade = CascadeType.ALL,
            fetch = FetchType.LAZY)
    @JoinTable(
            name = "airport_flight",
            joinColumns = @JoinColumn(name = "airport_id"),
            inverseJoinColumns = @JoinColumn(name = "flight_id"))
    @Schema(description = "Flights associated with this airport")
    private Set<Flight> flight;

    /**
     * Default constructor for Airport.
     */
    public Airport() {
    }

    /**
     * Constructs a new Airport with the specified details.
     *
     * @param airportId      The airport ID.
     * @param airportCode    The airport code.
     * @param airportName    The name of the airport.
     * @param airportCity    The city where the airport is located.
     * @param airportCountry The country where the airport is located.
     */
    public Airport(Long airportId, String airportCode, String airportName, String airportCity, String airportCountry) {
        this.airportId = airportId;
        this.airportCode = airportCode;
        this.airportName = airportName;
        this.airportCity = airportCity;
        this.airportCountry = airportCountry;
    }

    /**
     * Gets the airport ID.
     *
     * @return The airport ID.
     */
    public Long getAirportId() {
        return airportId;
    }

    /**
     * Sets the airport ID.
     *
     * @param airportId The airport ID.
     */
    public void setAirportId(Long airportId) {
        this.airportId = airportId;
    }

    /**
     * Gets the airport code.
     *
     * @return The airport code.
     */
    public String getAirportCode() {
        return airportCode;
    }

    /**
     * Sets the airport code.
     *
     * @param airportCode The airport code.
     */
    public void setAirportCode(String airportCode) {
        this.airportCode = airportCode;
    }

    /**
     * Gets the name of the airport.
     *
     * @return The name of the airport.
     */
    public String getAirportName() {
        return airportName;
    }

    /**
     * Sets the name of the airport.
     *
     * @param airportName The name of the airport.
     */
    public void setAirportName(String airportName) {
        this.airportName = airportName;
    }

    /**
     * Gets the city where the airport is located.
     *
     * @return The airport city.
     */
    public String getAirportCity() {
        return airportCity;
    }

    /**
     * Sets the city where the airport is located.
     *
     * @param airportCity The airport city.
     */
    public void setAirportCity(String airportCity) {
        this.airportCity = airportCity;
    }

    /**
     * Gets the country where the airport is located.
     *
     * @return The airport country.
     */
    public String getAirportCountry() {
        return airportCountry;
    }

    /**
     * Sets the country where the airport is located.
     *
     * @param airportCountry The airport country.
     */
    public void setAirportCountry(String airportCountry) {
        this.airportCountry = airportCountry;
    }

    /**
     * Gets the flights associated with the airport.
     *
     * @return The set of flights.
     */
    public Set<Flight> getFlight() {
        return flight;
    }

    /**
     * Sets the flights associated with the airport.
     *
     * @param flight The set of flights.
     */
    public void setFlight(Set<Flight> flight) {
        this.flight = flight;
    }
}
