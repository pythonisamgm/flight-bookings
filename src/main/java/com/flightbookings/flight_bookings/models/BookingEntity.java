package com.flightbookings.flight_bookings.models;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.*;

import java.time.LocalDateTime;
/**
 * Represents a booking entity in the system.
 * Contains details about the booking date, associated passenger, flight, seat, and user.
 */
@Entity
@Table(name = "booking")
@Schema(description = "All details about the Booking entity.")
public class BookingEntity {

    /**
     * The unique identifier of the booking generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Schema(description = "The database generated booking ID")
    private Long bookingId;

    /**
     * The date and time when the booking was made.
     */
    @Column
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd-MM-yyyy HH:mm:ss")
    @Schema(description = "The date and time when the booking was made")
    private LocalDateTime dateOfBooking = LocalDateTime.now();

    /**
     * The passenger associated with this booking.
     */
    @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    @JoinColumn(name = "passenger_id")
    @JsonManagedReference(value = "booking-passenger")
    @Schema(description = "The passenger associated with this booking")
    private PassengerEntity passenger;

    /**
     * The flight associated with this booking.
     */
    @ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "flight_id", nullable = false)
    @JsonBackReference(value = "booking-flight")
    @Schema(description = "The flight associated with this booking")
    private FlightEntity flight;

    /**
     * The seat reserved in this booking.
     */
    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "seat_id")
    @JsonBackReference(value = "booking-seat")
    @Schema(description = "The seat reserved in this booking")
    private SeatEntity seat;

    /**
     * The user who made the booking.
     */
    @ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "user_id", nullable = false)
    @JsonBackReference(value = "user-booking")
    @Schema(description = "The user who made the booking")
    private UserEntity user;

    /**
     * Default constructor for Booking.
     */
    public BookingEntity() {
    }

    /**
     * Constructs a new Booking with the specified details.
     *
     * @param bookingId      The booking ID.
     * @param dateOfBooking  The date and time of the booking.
     * @param passenger      The passenger associated with the booking.
     * @param flight         The flight associated with the booking.
     * @param seat           The seat reserved in the booking.
     * @param user           The user who made the booking.
     */
    public BookingEntity(Long bookingId, LocalDateTime dateOfBooking, PassengerEntity passenger, FlightEntity flight, SeatEntity seat, UserEntity user) {
        this.bookingId = bookingId;
        this.dateOfBooking = dateOfBooking;
        this.passenger = passenger;
        this.flight = flight;
        this.seat = seat;
        this.user = user;
    }

    /**
     * Gets the booking ID.
     *
     * @return The booking ID.
     */
    public Long getBookingId() {
        return bookingId;
    }

    /**
     * Sets the booking ID.
     *
     * @param bookingId The booking ID.
     */
    public void setBookingId(Long bookingId) {
        this.bookingId = bookingId;
    }

    /**
     * Gets the date of booking.
     *
     * @return The date and time of booking.
     */
    public LocalDateTime getDateOfBooking() {
        return dateOfBooking;
    }

    /**
     * Sets the date of booking.
     *
     * @param dateOfBooking The date and time of booking.
     */
    public void setDateOfBooking(LocalDateTime dateOfBooking) {
        this.dateOfBooking = dateOfBooking;
    }

    /**
     * Gets the passenger associated with the booking.
     *
     * @return The passenger.
     */
    public PassengerEntity getPassenger() {
        return passenger;
    }

    /**
     * Sets the passenger for the booking.
     *
     * @param passenger The passenger.
     */
    public void setPassenger(PassengerEntity passenger) {
        this.passenger = passenger;
    }

    /**
     * Gets the flight associated with the booking.
     *
     * @return The flight.
     */
    public FlightEntity getFlight() {
        return flight;
    }

    /**
     * Sets the flight for the booking.
     *
     * @param flight The flight.
     */
    public void setFlight(FlightEntity flight) {
        this.flight = flight;
    }

    /**
     * Gets the seat reserved in the booking.
     *
     * @return The seat.
     */
    public SeatEntity getSeat() {
        return seat;
    }

    /**
     * Sets the seat for the booking.
     *
     * @param seat The seat.
     */
    public void setSeat(SeatEntity seat) {
        this.seat = seat;
    }

    /**
     * Gets the user who made the booking.
     *
     * @return The user.
     */
    public UserEntity getUser() {
        return user;
    }

    /**
     * Sets the user for the booking.
     *
     * @param user The user.
     */
    public void setUser(UserEntity user) {
        this.user = user;
    }
}
