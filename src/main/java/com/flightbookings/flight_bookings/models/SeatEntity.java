package com.flightbookings.flight_bookings.models;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.*;
/**
 * Represents a seat entity in the system.
 * Contains details about the seat's row, letter, booking status, and associations with flights and bookings.
 */
@Entity
@Table(name = "seat", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"seat_name", "flight_id"})
})
@Schema(description = "All details about the Seat entity.")
public class SeatEntity {

    /**
     * The unique identifier of the seat generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column
    @Schema(description = "The database generated seat ID")
    private Long seatId;

    /**
     * The row number of the seat.
     */
    @Column
    @Schema(description = "The row number of the seat")
    private int row;

    /**
     * The letter of the seat in the row.
     */
    @Enumerated(EnumType.STRING)
    @Column
    @Schema(description = "The letter of the seat in the row")
    private ESeatLetter seatLetter;

    /**
     * Indicates whether the seat is booked or not.
     */
    @Column
    @Schema(description = "Booking status of the seat")
    private boolean booked = false;

    /**
     * The unique identifier for the seat (combination of row and letter).
     */
    @Column(nullable = false)
    @Schema(description = "The unique identifier for the seat (row + letter)")
    private String seatName;

    /**
     * The flight associated with this seat.
     */
    @ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "flight_id", nullable = false)
    @JsonBackReference(value = "flight-seat")
    @Schema(description = "The flight associated with this seat")
    private FlightEntity flight;

    /**
     * The booking associated with this seat.
     */
    @OneToOne(mappedBy = "seat", cascade = CascadeType.ALL)
    @JsonManagedReference(value = "booking-seat")
    @Schema(description = "The booking associated with this seat")
    private BookingEntity booking;

    /**
     * Default constructor.
     */
    public SeatEntity() {
    }

    /**
     * Constructs a new Seat with the specified details.
     *
     * @param seatId     The ID of the seat.
     * @param row        The row number of the seat.
     * @param seatLetter The letter of the seat.
     * @param booked     The booking status of the seat.
     * @param flight     The flight associated with this seat.
     * @param booking    The booking associated with this seat.
     */
    public SeatEntity(Long seatId, int row, ESeatLetter seatLetter, boolean booked, FlightEntity flight, BookingEntity booking) {
        this.seatId = seatId;
        this.row = row;
        this.seatLetter = seatLetter;
        this.booked = booked;
        this.seatName = row + seatLetter.name();
        this.flight = flight;
        this.booking = booking;
    }

    /**
     * Gets the seat ID.
     *
     * @return The seat ID.
     */
    public Long getSeatId() {
        return seatId;
    }

    /**
     * Sets the seat ID.
     *
     * @param seatId The seat ID.
     */
    public void setSeatId(Long seatId) {
        this.seatId = seatId;
    }

    /**
     * Gets the row number of the seat.
     *
     * @return The row number.
     */
    public int getRow() {
        return row;
    }

    /**
     * Sets the row number of the seat.
     *
     * @param row The row number.
     */
    public void setRow(int row) {
        this.row = row;
    }

    /**
     * Gets the seat letter.
     *
     * @return The seat letter.
     */
    public ESeatLetter getSeatLetter() {
        return seatLetter;
    }

    /**
     * Sets the seat letter.
     *
     * @param seatLetter The seat letter.
     */
    public void setSeatLetter(ESeatLetter seatLetter) {
        this.seatLetter = seatLetter;
    }

    /**
     * Checks if the seat is booked.
     *
     * @return True if booked, false otherwise.
     */
    public boolean isBooked() {
        return booked;
    }

    /**
     * Sets the booking status of the seat.
     *
     * @param booked The booking status.
     */
    public void setBooked(boolean booked) {
        this.booked = booked;
    }

    /**
     * Gets the seat name (combination of row and letter).
     *
     * @return The seat name.
     */
    public String getSeatName() {
        return seatName;
    }

    /**
     * Sets the seat name.
     *
     * @param seatName The seat name.
     */
    public void setSeatName(String seatName) {
        this.seatName = seatName;
    }

    /**
     * Gets the flight associated with this seat.
     *
     * @return The flight.
     */
    public FlightEntity getFlight() {
        return flight;
    }

    /**
     * Sets the flight associated with this seat.
     *
     * @param flight The flight.
     */
    public void setFlight(FlightEntity flight) {
        this.flight = flight;
    }

    /**
     * Gets the booking associated with this seat.
     *
     * @return The booking.
     */
    public BookingEntity getBooking() {
        return booking;
    }

    /**
     * Sets the booking associated with this seat.
     *
     * @param booking The booking.
     */
    public void setBooking(BookingEntity booking) {
        this.booking = booking;
    }
}
